
import wsdt.ml.predict.BirthmarkType
import wsdt.ml.predict.Predictor
import java.io.File
import java.util.*
import javax.servlet.annotation.WebServlet
import javax.servlet.http.HttpServlet
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

/** Receives post-requests from mobile application, classifies via the Predictor the birthmark and returns a resultJson.  */
@WebServlet(name="Analyze", value=["/analyze"])
class PictureController : HttpServlet() {
    /** CharPool to have a char-range to generate a random string which can be used as a random file name, without
     * causing any conflicts (e.g. special characters like colons). */
    private val charPool : List<Char> = ('a'..'z') + ('A'..'Z') + ('0'..'9')

    /** Receives post request and starts prediction, returns json etc.
     * @param req: Request object
     * @param res: Response object */
    override fun doPost(req: HttpServletRequest, res: HttpServletResponse) {
        val fileName = decodeImg(req.getParameter("image"))
        val birthmarkTypes:List<BirthmarkType> = Predictor.predict(fileName, this.servletContext.getRealPath("/WEB-INF/classes"))

        val resultJson = "[${birthmarkTypes[0]},${birthmarkTypes[1]},${birthmarkTypes[2]}]"
        res.writer.write(resultJson)
    }

    /** Generates a random string to name a newly uploaded file uniquely.
     * @return String: Random string */
    fun getRandomStr() : String {
        return (1..30)
                .map { kotlin.random.Random.nextInt(0, charPool.size) }
                .map(charPool::get)
                .joinToString("")

    }

    /** Decodes base64 encoded image into an object and saves it into /resources/uploaded with a random file name.
     * The file name is generated by getRandomStr().
     * @param base64Str: Base64 encoded image to decode.
     * @return String: Filename used to save the image. Used by the Predictor to access the image. */
    fun decodeImg(base64Str: String) : String {
        val fileName = getRandomStr()

        val imageByteArr =  Base64.getDecoder().decode(base64Str)

        val pathname = this.servletContext.getRealPath("/WEB-INF/classes/uploaded/$fileName.jpg")
        File(pathname).writeBytes(imageByteArr)

        return fileName
    }
}
